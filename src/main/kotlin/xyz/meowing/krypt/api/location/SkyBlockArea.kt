package xyz.meowing.krypt.api.location

data class SkyBlockArea(val name: String) {
    fun inArea() = LocationAPI.area == this

    companion object {
        fun inAnyArea(vararg areas: SkyBlockArea) = LocationAPI.area in areas
        fun inAnyArea(areas: Collection<SkyBlockArea>) = LocationAPI.area in areas
    }
}

@Suppress("unused")
object SkyBlockAreas {

    internal val registeredAreas = mutableMapOf<String, SkyBlockArea>()

    private fun register(key: String, name: String) = registeredAreas.getOrPut(key) { SkyBlockArea(name) }

    val NONE = register("none", "None")
    val PRIVATE_ISLAND = register("private_island", "Your Island")
    val GARDEN = register("garden", "The Garden")

    // Hub
    val VILLAGE = register("village", "Village")
    val FOREST = register("forest", "Forest")
    val PET_CARE = register("pet_care", "Pet Care")
    val FARM = register("farm", "Farm")
    val ARTISTS_ABODE = register("artists_abode", "Artist's Abode")
    val COLOSSEUM = register("colosseum", "Colosseum")
    val FASHION_SHOP = register("fashion_shop", "Fashion Shop")
    val FLOWER_HOUSE = register("flower_house", "Flower House")
    val CANVAS_ROOM = register("canvas_room", "Canvas Room")
    val MOUNTAIN = register("mountain", "Mountain")
    val BANK = register("bank", "Bank")
    val AUCTION_HOUSE = register("auction_house", "Auction House")
    val SHENS_AUCTION = register("shens_auction", "Shen's Auction")
    val COMMUNITY_CENTER = register("community_center", "Community Center")
    val ELECTION_ROOM = register("election_room", "Election Room")
    val FARMHOUSE = register("farmhouse", "Farmhouse")
    val WEAPONSMITH = register("weaponsmith", "Weaponsmith")
    val BLACKSMITH = register("blacksmith", "Blacksmith")
    val ARCHERY_RANGE = register("archery_range", "Archery Range")
    val LIBRARY = register("library", "Library")
    val HEXATORUM = register("hexatorium", "Hexatorium")
    val TRADE_CENTER = register("trade_center", "Trade Center")
    val BUILDERS_HOUSE = register("builders_house", "Builder's House")
    val TAVERN = register("tavern", "Tavern")
    val GRAVEYARD = register("graveyard", "Graveyard")
    val COAL_MINE = register("coal_mine", "Coal Mine")
    val BAZAAR_ALLEY = register("bazaar_alley", "Bazaar Alley")
    val WILDERNESS = register("wilderness", "Wilderness")
    val FISHING_OUTPOST = register("fishing_outpost", "Fishing Outpost")
    val FISHERMANS_HUT = register("fishermans_hut", "Fisherman's Hut")
    val UNINCORPORATED = register("unincorporated", "Unincorporated")
    val WIZARD_TOWER = register("wizard_tower", "Wizard Tower")
    val RUINS = register("ruins", "Ruins")

    // Rift
    val WYLD_WOODS = register("wyld_woods", "Wyld Woods")
    val THE_BASTION = register("the_bastion", "The Bastion")
    val BROKEN_CAGE = register("broken_cage", "Broken Cage")
    val SHIFTED_TAVERN = register("shifted_tavern", "Shifted Tavern")
    val BLACK_LAGOON = register("black_lagoon", "Black Lagoon")
    val LAGOON_CAVE = register("lagoon_cave", "Lagoon Cave")
    val OTHERSIDE = register("otherside", "Otherside")
    val LEECHES_LAIR = register("leeches_lair", "Leeches Lair")
    val LAGOON_HUT = register("lagoon_hut", "Lagoon Hut")
    val AROUND_COLOSSEUM = register("around_colosseum", "Around Colosseum")
    val WEST_VILLAGE = register("west_village", "West Village")
    val DOPLHIN_TRAINER = register("dolphin_trainer", "Dolphin Trainer")
    val INFESTED_HOUSE = register("infested_house", "Infested House")
    val DREADFARM = register("dreadfarm", "Dreadfarm")
    val MIRRORVERSE = register("mirrorverse", "Mirrorverse")
    val CAKE_HOUSE = register("cake_house", "Cake House")
    val VILLAGE_PLAZA = register("village_plaza", "Village Plaza")
    val MURDER_HOUSE = register("murder_house", "Murder House")
    val TAYLORS = register("taylors", "Taylor's")
    val HALF_EATEN_CAVE = register("half_eaten_cave", "Half-Eaten Cave")
    val BOOK_IN_A_BOOK = register("book_in_a_book", "Book in a Book")
    val EMPTY_BANK = register("empty_bank", "Empty Bank")
    val BARRIER_STREET = register("barrier_street", "Barrier Street")
    val BARRY_CENTER = register("barry_center", "Barry Center")
    val BARRY_HQ = register("barry_hq", "Barry HQ")
    val RIFT_GALLERY = register("rift_gallery", "Rift Gallery")
    val RIFT_GALLERY_ENTRANCE = register("rift_gallery_entrance", "Rift Gallery Entrance")
    val THE_MOUNTAINTOP = register("the_mountaintop", "The Mountaintop")
    val WIZARDMAN_BUREAU = register("wizardman_bureau", "Wizardman Bureau")
    val THE_VENTS = register("the_vents", "The Vents")
    val CEREBRAL_CITADEL = register("cerebral_citadel", "Cerebral Citadel")
    val WALK_OF_FAME = register("walk_of_fame", "Walk of Fame")
    val TRIAL_GROUNDS = register("trial_grounds", "Trial Grounds")
    val CONTINUUM = register("continuum", "Continuum")
    val TIME_CHAMBER = register("time_chamber", "Time Chamber")

    // Rift-Slayer
    val PHOTON_PATHWAY = register("photon_pathway", "Photon Pathway")
    val STILLGORE_CHATEAU = register("stillgore_chateau", "Stillgore Ch√¢teau")
    val OUBLIETTE = register("oubliette", "Oubliette")
    val FAIRYLOSOPHER_TOWER = register("fairylosopher_tower", "Fairylosopher Tower")

    // Dwarves
    val BASECAMP = register("basecamp", "Dwarven Base Camp")
    val FOSSIL_RESEARCH = register("fossil_research", "Fossil Research Center")
    val GLACITE_TUNNELS = register("glacite_tunnels", "Glacite Tunnels")
    val GREAT_LAKE = register("great_lake", "Great Glacite Lake")

    // Crimson
    val DOJO = register("dojo", "Dojo")
    val DOJO_ARENA = register("dojo_arena", "Dojo Arena")
    val MAGMA_CHAMBER = register("magma_chamber", "Magma Chamber")
    val CRIMSON_ISLE = register("crimson_isle", "Crimson Isle")
    val CRIMSON_FIELDS = register("crimson_fields", "Crimson Fields")
    val BURNING_DESERT = register("burning_desert", "Burning Desert")
    val DRAGONTAIL = register("dragontail", "Dragontail")
    val DRAGONTAIL_BLACKSMITH = register("dragontail_blacksmith", "Dragontail Blacksmith")
    val DRAGONTAIL_BANK = register("dragontail_bank", "Dragontail Bank")
    val DRAGONTAIL_TOWNSQUARE = register("dragontail_townsquare", "Dragontail Townsquare")
    val DRAGONTAIL_AUCTION_HOUS = register("dragontail_auction_hous", "Dragontail Auction Hous")
    val MINION_SHOP = register("minion_shop", "Minion Shop")
    val THE_DUKEDOM = register("the_dukedom", "The Dukedom")
    val BLAZING_VOLCANO = register("blazing_volcano", "Blazing Volcano")
    val ODGER_HUT = register("odger_hut", "Odger's Hut")
    val THE_WASTELAND = register("the_wasteland", "The Wasteland")
    val FORGOTTEN_SKULL = register("forgotten_skull", "Forgotten Skull")
    val SCARLETON = register("scarleton", "Scarleton")
    val COURTYARD = register("courtyard", "Courtyard")
    val SCARLETON_BANK = register("scarleton_bank", "Scarleton Bank")
    val SCARLETON_PLAZA = register("scarleton_plaza", "Scarleton Plaza")
    val SCARLETON_AUCTION_HOUSE = register("scarleton_auction_house", "Scarleton Auction House")
    val SCARLETON_BAZAAR = register("scarleton_bazaar", "Scarleton Bazaar")
    val SCARLETON_MINION_SHOP = register("scarleton_minion_shop", "Scarleton Minion Shop")
    val SCARLETON_BLACKSMITH = register("scarleton_blacksmith", "Scarleton Blacksmith")
    val CATHEDRAL = register("cathedral", "Cathedral")
    val MYSTIC_MARSH = register("mystic_marsh", "Mystic Marsh")
    val MATRIARCH_LAIR = register("matriarch_lair", "Matriarch's Lair")
    val BELLY_OF_THE_BEAST = register("belly_of_the_beast", "Belly of the Beast")
    val SMOLDERING_TOMB = register("smoldering_tomb", "Smoldering Tomb")


    // Jerry
    val GLACIAL_CAVE = register("glacial_cave", "Glacial Cave")
    val MOUNT_JERRY = register("mount_jerry", "Mount Jerry")
    val HOT_SPRINGS = register("hot_springs", "Hot Springs")
    val JERRY_POND = register("jerry_pond", "Jerry Pond")
    val REFLECTIVE_POND = register("reflective_pond", "Reflective Pond")
    val TERRYS_SHACK = register("terrys_shack", "Terry's Shack")
    val SUNKEN_JERRY_POND = register("sunken_jerry_pond", "Sunken Jerry Pond")
    val EINARYS_EMPORIUM = register("einarys_emporioum", "Einary's Emporium")
    val SHERRYS_SHOWROOM = register("sherrys_showroom", "Sherry's Showroom")
    val GARYS_SHACK = register("garys_shack", "Gary's Shack")

    // Spider
    val SPIDER_MOUND = register("spider_mound", "Spider Mound")
    val GRAVEL_MINES = register("gravel_mines", "Gravel Mines")
    val GRANDMAS_HOUSE = register("grandmas_house", "Grandma's House")
    val ARACHNES_BURROW = register("arachnes_burrow", "Arachne's Burrow")
    val ARACHNES_SANCTUARY = register("arachnes_sanctuary", "Arachne's Sanctuary")
    val ARCHAEOLOGISTS_CAMP = register("archaeologists_camp", "Archaeologist's Camp")

    // End
    val DRAGONS_NEST = register("dragons_nest", "Dragon's Nest")
    val VOID_SEPULTURE = register("void_sepulture", "Void Sepulture")
    val VOID_SLATE = register("void_slate", "Void Slate")
    val ZEALOT_BRUISER_HIDEOUT = register("zealot_bruiser_hideout", "Zealot Bruiser Hideout")

    // Farming Islands
    val THE_BARN = register("the_barn", "The Barn")
    val MUSHROOM_DESERT = register("mushroom_desert", "Mushroom Desert")
    val WINDMILL = register("windmill", "Windmill")
    val DESERT_SETTLEMENT = register("desert_settlement", "Desert Settlement")
    val GLOWING_MUSHROOM_CAVE = register("glowing_mushroom_cave", "Glowing Mushroom Cave")
    val JAKES_HOUSE = register("jakes_house", "Jake's House")
    val MUSHROOM_GORGE = register("mushroom_gorge", "Mushroom Gorge")
    val OASIS = register("oasis", "Oasis")
    val OVERGROWN_MUSHROOM_CAVE = register("overgrown_mushroom_cave", "Overgrown Mushroom Cave")
    val SHEPHERDS_KEEP = register("shepherds_keep", "Shepherd's Keep")
    val TRAPPERS_DEN = register("trappers_den", "Trapper's Den")
    val TREASURE_HUNTER_CAMP = register("treasure_hunter_camp", "Treasure Hunter Camp")

    // Park
    val BIRCH_PARK = register("birch_park", "Birch Park")
    val HOWLING_CAVE = register("howling_cave", "Howling Cave")
    val SOUL_CAVE = register("soul_cave", "Soul Cave")
    val SPIRIT_CAVE = register("spirit_cave", "Spirit Cave")
    val SPRUCE_WOODS = register("spruce_woods", "Spruce Woods")
    val LONELY_ISLAND = register("lonely_island", "Lonely Island")
    val VIKING_LONGHOUSE = register("viking_longhouse", "Viking Longhouse")
    val DARK_THICKET = register("dark_thicket", "Dark Thicket")
    val SAVANNA_WOODLAND = register("savanna_woodland", "Savanna Woodland")
    val MELODYS_PLATEAU = register("melodys_plateau", "Melody's Plateau")
    val JUNGLE_ISLAND = register("jungle_island", "Jungle Island")

    // Deep Caverns
    val DEEP_CAVERNS = register("deep_caverns", "Deep Caverns")
    val GUNPOWDER_MINES = register("gunpowder_mines", "Gunpowder Mines")
    val LAPIS_QUARRY = register("lapis_quarry", "Lapis Quarry")
    val PIGMENS_DEN = register("pigmens_den", "Pigmen's Den")
    val SLIMEHILL = register("slimehill", "Slimehill")
    val DIAMOND_RESERVE = register("diamond_reserve", "Diamond Reserve")
    val OBSIDIAN_SANCTUARY = register("obsidian_sanctuary", "Obsidian Sanctuary")

    // Crystal Hollows
    val CRYSTAL_NUCLEUS = register("crystal_nucleus", "Crystal Nucleus")
    val GOBLIN_HOLDOUT = register("goblin_holdout", "Goblin Holdout")
    val GOBLIN_QUEENS_DEN = register("goblin_queens_den", "Goblin Queen's Den")
    val JUNGLE = register("jungle", "Jungle")
    val JUNGLE_TEMPLE = register("jungle_temple", "Jungle Temple")
    val PRECURSOR_REMNANTS = register("precursor_remnants", "Precursor Remnants")
    val LOST_PRECURSOR_CITY = register("lost_precursor_city", "Lost Precursor City")
    val MITHRIL_DEPOSITS = register("mithril_deposits", "Mithril Deposits")
    val DRAGONS_LAIR = register("dragons_lair", "Dragon's Lair") // also in galatea
    val MINES_OF_DIVAN = register("mines_of_divan", "Mines of Divan")
    val MAGMA_FIELDS = register("magma_fields", "Magma Fields")
    val KHAZAD_DUM = register("khazad_dum", "Khazad-d√ªm")
    val FAIRY_GROTTO = register("fairy_grotto", "Fairy Grotto")

    // Backwater Bayou
    val BACKWATER_BAYOU = register("backwater_bayou", "Backwater Bayou") // The full island uses this

    // Galatea
    val TANGLEBURG_PATH = register("tangleburg_path", "Tangleburg's Path")
    val TANGLEBURG = register("tangleburg", "Tangleburg")
    val NORTH_REACHES = register("north_reaches", "North Reaches")
    val WEST_REACHES = register("west_reaches", "West Reaches")
    val SOUTH_REACHES = register("south_reaches", "South Reaches")
    val MOONGLADE_MARSH = register("moonglade_marsh", "Moonglade Marsh")
    val MOONGLADE_EDGE = register("moonglade_edge", "Moonglade's Edge")
    val VERDANT_SUMMIT = register("verdant_summit", "Verdant Summit")
    val NORTH_WETLANDS = register("north_wetlands", "North Wetlands")
    val WESTBOUND_WETLANDS = register("westbound_wetlands", "Westbound Wetlands")
    val SOUTH_WETLANDS = register("south_wetlands", "South Wetlands")
    val MURKWATER_LOCH = register("murkwater_loch", "Murkwater Loch")
    val WYRMGROVE_TOMB = register("wyrmgrove_tomb", "Wyrmgrove Tomb")
    val EVERGREEN_PLATEAU = register("evergreen_plateau", "Evergreen Plateau")
    val MURKWATER_OUTPOST = register("murkwater_outpost", "Murkwater Outpost")
    val MURKWATER_DEPTHS = register("murkwater_depths", "Murkwater Depths")
    val ANCIENT_RUINS = register("ancient_ruins", "Ancient Ruins")
    val MURKWATER_SHALLOWS = register("murkwater_shallows", "Murkwater Shallows")
    val DIVE_EMBER_PASS = register("dive_ember_pass", "Dive-Ember Pass")
    val STRIDE_EMBER_FISSURE = register("stride_ember_fissure", "Stride-Ember Fissure")
    val SIDE_EMBER_WAY = register("side_ember_way", "Side-Ember Way")
    val REEFGUARD_DEPTHS = register("reefguard_depths", "Reefguard Depths")
    val REEFGUARD_PASS = register("reefguard_pass", "Reefguard Pass")
    val DROWNED_RELIQUARY = register("drowned_reliquary", "Drowned Reliquary")
    val BUBBLEBOOST_COLUMN = register("bubbleboost_column", "Bubbleboost Column")
    val KELPWOVEN_TUNNELS = register("kelpwoven_tunnels", "Kelpwoven Tunnels")
    val RED_HOUSE = register("red_house", "Red House")
    val TOMB_FLOODWAY = register("tomb_floodway", "Tomb Floodway")
    val DRIPTOAD_DELVE = register("driptoad_delve", "Driptoad Delve")
    val DRIPTOAD_PASS = register("driptoad_pass", "Driptoad Pass")
    val TANGLEBURG_BANK = register("tangleburg_bank", "Tangleburg Bank")
    val FUSION_HOUSE = register("fusion_house", "Fusion House")
    val SWAMP_CUT_INC = register("swamp_cut_inc", "SwampCut Inc.")
    val TANGLEBURG_LIBRARY = register("tangleburg_library", "Tangleburg Library")
    val FOREST_TEMPLE = register("forest_temple", "Forest Temple")
    val TRANQUILITY_SANCTUM = register("tranquility_sanctum", "Tranquility Sanctum")
    val TRANQUIL_PASS = register("tranquil_pass", "Tranquil Pass")

    // Dwarven Mines
    val THE_LIFT = register("the_lift", "The Lift")
    val DWARVEN_VILLAGE = register("dwarven_village", "Dwarven Village")
    val DWARVEN_MINES = register("dwarven_mines", "Dwarven Mines")
    val LAVA_SPRINGS = register("lava_springs", "Lava Springs")
    val PALACE_BRIDGE = register("palace_bridge", "Palace Bridge")
    val ROYAL_PALACE = register("royal_palace", "Royal Palace")
    val GRAND_LIBRARY = register("grand_library", "Grand Library")
    val ROYAL_QUARTERS = register("royal_quarters", "Royal Quarters")
    val BARRACKS_OF_HEROES = register("barracks_of_heroes", "Barracks of Heroes")
    val HANGING_COURT = register("hanging_court", "Hanging Court")
    val GREAT_ICE_WALL = register("great_ice_wall", "Great Ice Wall")
    val ARISTOCRAT_PASSAGE = register("aristocrat_passage", "Aristocrat Passage")
    val ROYAL_MINES = register("royal_mines", "Royal Mines")
    val THE_MIST = register("the_mist", "The Mist")
    val DIVANS_GATEWAY = register("divans_gateway", "Divan's Gateway")
    val CLIFFSIDE_VEINS = register("cliffside_veins", "Cliffside Veins")
    val FORGE_BASIN = register("forge_basin", "Forge Basin")
    val THE_FORGE = register("the_forge", "The Forge")
    val RAMPARTS_QUARRY = register("ramparts_quarry", "Rampart's Quarry")
    val FAR_RESERVE = register("far_reserve", "Far Reserve")
    val UPPER_MINES = register("upper_mines", "Upper Mines")
    val ABANDONED_QUARRY = register("abandoned_quarry", "Abandoned Quarry")
}